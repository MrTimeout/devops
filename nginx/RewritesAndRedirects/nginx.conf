events {}

http {

    include mime.types;

    server {
        listen 80;
        server_name 127.0.0.1;

        root /sites/demo/resources;

        # Here we are rewritting all paths that fit that pattern and returning an URI. This URI has to be reevaluated in the location directives.
        rewrite ^/user/(\w+) /greet/$1 last;
        rewrite ^/user/jhon$ /logo;

        # return statement will redirect the URI /logo to /thumb.png changing the URI on the browser. It REDIRECTS, not REWRITE.
        location = /logo {
            set $container_port 12345;
            # This is a temporary workaround. It is used because when redirecting outside of Docker, we don't know how to redirect because the container port 
            # differ from the internal port
            if ( $arg_local ~ yes ) {
                set $container_port $server_port;
            }

            # It should redirect to the file thumb.png but because of its binary form, I prefer to use other simple extension file.
            return 307 http://$server_name:$container_port/style.css;
        }

        location /greet {
            return 200 "Hello world\n";
        }

        location = /greet/jhon {
            return 200 "Hello Jhon\n";
        }
    }
}

# rewrite pattern URI
# return status [string|path]

# status = 3xx => we need to use a path
# otherwise we use a string

# https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
# HTTP status
# 300 -> Multiple choices
# 301 -> Moved permanently
# 302 -> Found (Previously "Moved temporarily")
# 303 -> See other (Since HTTP 1.1) -> You can get the content fetching another URI using a GET method, instead a POST|PUT|DELETE
# 304 -> Not modified (RFC 7232)
# 305 -> Use proxy (Since HTTP 1.1)
# 306 -> Switch proxy
# 307 -> Temporary Redirect (Since HTTP1.1)
# 308 -> Permanent Redirect (RFC 7538)